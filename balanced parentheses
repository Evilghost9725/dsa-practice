#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Function to check if parentheses in expression are balanced
bool isBalanced(const string& exp) {
    stack<char> myStack;  // Stack to keep track of opening brackets

    for (char curr_char : exp) {
        // If current char is an opening bracket, push it onto stack
        if (curr_char == '(' || curr_char == '[' || curr_char == '{') {
            myStack.push(curr_char);
        } 
        // If current char is a closing bracket
        else if (curr_char == ')' || curr_char == ']' || curr_char == '}') {
            // If stack is empty, no matching opening bracket
            if (myStack.empty())
                return false;

            char top_char = myStack.top();  // Get last opening bracket
            myStack.pop();  // Remove it from stack

            // Check if current closing bracket matches the opening bracket
            if ((curr_char == ')' && top_char != '(') ||
                (curr_char == ']' && top_char != '[') ||
                (curr_char == '}' && top_char != '{'))
                return false;
        }
        // Ignore other characters
    }

    // If stack is empty, all brackets matched; otherwise, not balanced
    return myStack.empty();
}

int main() {
    string exp;
    cout << "Enter an expression: ";
    getline(cin, exp);  // Read full line including spaces

    if (isBalanced(exp))
        cout << "The expression has balanced parentheses.\n";
    else
        cout << "The expression does not have balanced parentheses.\n";

    return 0;
}
